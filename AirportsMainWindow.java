package airports_restful;

import java.io.IOException;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionListener;
import org.json.simple.parser.ParseException;

public class AirportsMainWindow extends javax.swing.JFrame {

    DefaultListModel<Airport> modelAirportList = new DefaultListModel<>();

    public AirportsMainWindow() {
        initComponents();
        refreshAirportList();
    }

    private void refreshAirportList() {
        try {
            /*ListSelectionListener[] tempList = lstAirportList.getListSelectionListeners();
            //Crashes during update and delete if the listener is not 
            //temporarily disabled
            for (ListSelectionListener listener : tempList) {
                lstAirportList.removeListSelectionListener(listener);
            }*/
            modelAirportList.clear();
            List<Airport> list = DataLayer.getAllAirports();
            list.forEach((item) -> {
                modelAirportList.addElement(item);
            });
            tfCode.setText("");
            tfName.setText("");
            tfCity.setText("");
            tfCountry.setText("");
            tfElevation.setText("");
            tfLatitude.setText("");
            tfLongitude.setText("");
            /*            for (ListSelectionListener listener : tempList) {
                lstAirportList.addListSelectionListener(listener);
            }*/
        } catch (IllegalArgumentException e) {
            e.printStackTrace(System.out);
            JOptionPane.showMessageDialog(this,
                    "Error creating airport: " + e.getMessage());
        } catch (IOException | ParseException e) {
            e.printStackTrace(System.out);
            JOptionPane.showMessageDialog(this,
                    "Error querying the database: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstAirportList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        tfCode = new javax.swing.JTextField();
        tfName = new javax.swing.JTextField();
        tfCity = new javax.swing.JTextField();
        tfCountry = new javax.swing.JTextField();
        tfElevation = new javax.swing.JTextField();
        tfLatitude = new javax.swing.JTextField();
        tfLongitude = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btAddNew = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        btFindNearestAirport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstAirportList.setModel(modelAirportList);
        lstAirportList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstAirportList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAirportListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstAirportList);

        jLabel1.setText("Code:");

        tfCode.setPreferredSize(new java.awt.Dimension(172, 25));

        tfName.setPreferredSize(tfCode.getPreferredSize());

        tfCity.setPreferredSize(tfCode.getPreferredSize());

        tfCountry.setPreferredSize(tfCode.getPreferredSize());

        tfElevation.setPreferredSize(tfCode.getPreferredSize());

        tfLatitude.setPreferredSize(tfCode.getPreferredSize());

        tfLongitude.setPreferredSize(tfCode.getPreferredSize());

        jLabel2.setText("Name:");

        jLabel3.setText("City:");

        jLabel4.setText("Country:");

        jLabel5.setText("Elevation:");

        jLabel6.setText("Latitude:");

        jLabel7.setText("Longitude:");

        btAddNew.setText("Add new");
        btAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddNewActionPerformed(evt);
            }
        });

        btDelete.setText("Delete");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btUpdate.setText("Update");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        btFindNearestAirport.setText("Find Nearest Airport");
        btFindNearestAirport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFindNearestAirportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfCountry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfElevation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btAddNew)
                        .addGap(18, 18, 18)
                        .addComponent(btDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btUpdate))
                    .addComponent(btFindNearestAirport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfElevation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btAddNew)
                            .addComponent(btDelete)
                            .addComponent(btUpdate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btFindNearestAirport)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddNewActionPerformed
        Airport item;
        String code = tfCode.getText();
        String name = tfName.getText();
        String city = tfCity.getText();
        String country = tfCountry.getText();
        String elevation = tfElevation.getText();
        String latitude = tfLatitude.getText();
        String longitude = tfLongitude.getText();
        try {
            item = new Airport(code, name, city, country, Integer.parseInt(elevation),
                    Double.parseDouble(latitude), Double.parseDouble(longitude));
            DataLayer.createAirport(item);
            refreshAirportList();
        } catch (IllegalArgumentException e) {
            e.printStackTrace(System.out);
            JOptionPane.showMessageDialog(this,
                    "Invalid airport entry: " + e.getMessage());
        } catch (IOException e) {
            e.printStackTrace(System.out);
            JOptionPane.showMessageDialog(this,
                    "Error adding airport to database: " + e.getMessage());
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btAddNewActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        Airport item = lstAirportList.getSelectedValue();
        if (item == null) {
            return;
        }
        //Custom button text
        Object[] options = {"Delete", "Cancel"};
        int choice = JOptionPane.showOptionDialog(this,
                "Are you sure you want to delete item: " + item.getName(),
                "Confirm item deletion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);
        if (choice == 0) {
            try {
                DataLayer.deleteAirport(item.getCode());
                refreshAirportList();
            } catch (IOException e) {
                e.printStackTrace(System.out);
                JOptionPane.showMessageDialog(this,
                        "Error querying the database: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btDeleteActionPerformed

    private void lstAirportListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAirportListValueChanged
        Airport item = lstAirportList.getSelectedValue();
        if (item != null) {
            tfCode.setText(item.getCode());
            tfName.setText(item.getName());
            tfCity.setText(item.getCity());
            tfCountry.setText(item.getCountry());
            tfElevation.setText("" + item.getElevation());
            tfLatitude.setText("" + item.getLatitude());
            tfLongitude.setText("" + item.getLongitude());
        }
    }//GEN-LAST:event_lstAirportListValueChanged

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        Airport airport = lstAirportList.getSelectedValue();
        Airport item;
        String code = tfCode.getText();
        String name = tfName.getText();
        String city = tfCity.getText();
        String country = tfCountry.getText();
        String elevation = tfElevation.getText();
        String latitude = tfLatitude.getText();
        String longitude = tfLongitude.getText();
        try {
            item = new Airport(code, name, city, country, Integer.parseInt(elevation),
                    Double.parseDouble(latitude), Double.parseDouble(longitude));
            DataLayer.updateAirport(item, airport.getCode());
            refreshAirportList();
        } catch (IllegalArgumentException | IOException e) {
            e.printStackTrace(System.out);
            JOptionPane.showMessageDialog(this,
                    "Error updating airport in database: " + e.getMessage());
        }
    }//GEN-LAST:event_btUpdateActionPerformed

    private void btFindNearestAirportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFindNearestAirportActionPerformed
        Airport selectedAirport = lstAirportList.getSelectedValue();
        Airport nearestAirport;
        double nearestDistance;
        if (selectedAirport == null) {
            return;
        }
        nearestAirport = selectedAirport.getNearestAirport(modelAirportList);
        nearestDistance = selectedAirport.getDistance(nearestAirport);
        if (nearestAirport == null) {
            JOptionPane.showMessageDialog(this, "No airport found");
        } else {
            JOptionPane.showMessageDialog(this, String.format("The nearest "
                    + "airport is %s and is %d kilometres away.", nearestAirport,
                    (int) nearestDistance));
        }
    }//GEN-LAST:event_btFindNearestAirportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AirportsMainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AirportsMainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AirportsMainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AirportsMainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AirportsMainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddNew;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btFindNearestAirport;
    private javax.swing.JButton btUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Airport> lstAirportList;
    private javax.swing.JTextField tfCity;
    private javax.swing.JTextField tfCode;
    private javax.swing.JTextField tfCountry;
    private javax.swing.JTextField tfElevation;
    private javax.swing.JTextField tfLatitude;
    private javax.swing.JTextField tfLongitude;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
}
